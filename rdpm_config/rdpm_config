#!/bin/bash
##########################################################
#Function Definitions                                    #
##########################################################
invalid_command_handler(){
    echo -e "rdpm_config: invalid command.\nTry 'rdpm_config --help' for more information."
    exit 1
}


##########################################################
#Variable Definitions                                    #
##########################################################
help=$(cat << EOM
Runtime Dynamic Power Management information for NVIDIA Optimus laptops.
    
Usage: 
    rdpm_config {-f | --device_function} {vga | audio} [OPTION]...  intel | nvidia
        -a, --all                        displays all information for the PCI function
        -c, --control                    displays the status of the Dynamic Power Management for the PCI function
        -D, --pci_dev_sys_interface_dir  displays the sys interface directory that contains the files for that contain the information of runtime Dynamic Power Management for the PCI function
        -e, --runtime_enabled            displays status of the runtime Dynamic Power Management (enabled or disabled) for the PCI function
        -f, --device_function            specify which gpu PCI function is being queried (vga or audio)
        -s, --runtime_status             displays the current status (active or suspended) of the PCI function
        -t, --suspended_time             displays the cumulative length of time that the PCI function has been suspended since last boot (hh:mm:ss)
        -T, --active_time                displays the cumulative length of time that the PCI function has been active since last boot (hh:mm:ss)
        -u, --runtime_usage              displays the the runtime PM usage count of the PCI function

    rdpm_config -h | --help              display this help and exit

Examples:
    rdpm_config -f vga -s nvidia  Output the cumulative length of time the VGA controller PCI function of the nvidia gpu has been suspended since last boot.
    rdpm_config -f audio -se intel Output the cumulative length of time Audio device PCI function of intel integrated gpu has been suspended since last boot and status of Dynamic Power Management.

Additional Help:
    sysfs-devices-power: <https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-devices-power>
    Documentation/power/runtime_pm.txt: <https://lwn.net/Articles/347575/>
    RedHat Runtime Device Power Management: <https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/power_management_guide/runtime_device_power_management>
    NVIDIA PCI-Express Runtime D3 (RTD3) Power Management: <https://download.nvidia.com/XFree86/Linux-x86_64/515.65.01/README/dynamicpowermanagement.html>
    Full documentation: <https://www.kernel.org/doc/html/latest/power/runtime_pm.html>
EOM
)

sys_interface_dir="/sys/bus/pci/devices" #sys interface directory that contains the files for that contain the information of all PCI devices connected to computer
rdpm_dir="power"
nvidia_vga_controller_pci_device="0000:01:00.0"     #PCI <domain>:<bus number>:<device number>.function_number of NVIDIA VGA Controller function
nvidia_audio_device_pci_device="0000:01:00.2"       #PCI <domain>:<bus number>:<device number>.function_number of NVIDIA Audio device function
intel_vga_controller_pci_device="0000:00:02.0"      #PCI <domain>:<bus number>:<device number>.function_number of Intel VGA Controller function
intel_audio_device_pci_device="0000:00:1f.3"        #PCI <domain>:<bus number>:<device number>.function_number of Intel Audio device function



############################################################
# Main program                                             #
############################################################
set -e      # If a command in a Bash script exits with a non-zero status code, the entire script will stop.

#parse and check command line options
VALID_ARGS=$(getopt -o "acDef:hstTu" -l "all,control,pci_dev_sys_interface_dir,runtime_enabled,help,runtime_status,suspended_time,active_time,runtime_usage" -- "$@")

eval set -- "$VALID_ARGS" #assign valid arg values to positional parameters. Position of the value referenced as ${N} 

case $1 in
    -h | --help) # display custom Help function
        echo "$help"
        exit 0;;
esac

# #set the device pci device that is being queried
if [[ ${@: -1} == "nvidia" ]]; then # ${@: -1} gets the last command line argument
    if [[ ($1 == '-f') && ($2 == vga) ]]; then 
        shift 2; #shift by two spaces
        pci_device=$nvidia_vga_controller_pci_device
    elif [[ ($1 == '-f') && ($2 == audio) ]]; then
        shift 2; #shift by two spaces
        pci_device=$nvidia_audio_device_pci_device
    else 
        invalid_command_handler
    fi
elif [[ ${@: -1} == "intel" ]]; then
    if [[ ($1 == '-f') && ($2 == vga) ]]; then 
        shift 2; #shift by two spaces
        pci_device=$intel_vga_controller_pci_device
    elif [[ ($1 == '-f') &&  ($2 == audio) ]]; then
        shift 2; #shift by two spaces
        pci_device=$intel_audio_device_pci_device
    else 
        invalid_command_handler
    fi
else
    invalid_command_handler
fi


pci_dev_sys_interface_dir="${sys_interface_dir}/${pci_device}" #sys interface directory that contains the files for that contain the information of runtime Dynamic Power Management for the PCI function
pci_dev_sys_interface_power_dir="${pci_dev_sys_interface_dir}/${rdpm_dir}"

# test if devices exist,i.e., if it is currently loaded
if [ ! -d $pci_dev_sys_interface_power_dir ]; then 
    echo "$(cat << EOM
Device does not exist or it is not currently loaded on the pci bus.
Ensure there are not any settings/rules that are disabling the device and proceed with the step below.
Please do a rescan of the pci bus with the following command 'sudo echo 1 > /sys/bus/pci/rescan' and try again.

EOM
)"
exit 0
fi


# Process the input options. Add options as needed.
while [ : ]; do
    # echo "$@" # for debugging purposes
    case "$1" in
        -a | all)
            #reset command line args to include all arguments
            ARGS=$(getopt -o "cDestTu" -- "-cDestTu")
            eval set -- "$ARGS"
            continue
            ;;
        -c | --control)
            control="$(cat ${pci_dev_sys_interface_power_dir}/control)"
            ;;
        -D | --pci_dev_sys_interface_dir)
            dir="${pci_dev_sys_interface_dir}/"
            ;;
        -e | --runtime_enabled)
            runtime_enabled="$(cat ${pci_dev_sys_interface_power_dir}/runtime_enabled)"
            ;;
        -s | --runtime_status)
            runtime_status="$(cat ${pci_dev_sys_interface_power_dir}/runtime_status)"
            ;;
        -t | --runtime_suspended_time)
            runtime_suspended_time="$(cat ${pci_dev_sys_interface_power_dir}/runtime_suspended_time)"
            ;;
        -T | --runtime_active_time)
            runtime_active_time="$(cat ${pci_dev_sys_interface_power_dir}/runtime_active_time)"
            ;;
        -u | --runtime_usage)
            runtime_usage="$(cat ${pci_dev_sys_interface_power_dir}/runtime_usage)"
            ;;
        --) #no more arguments to match case with
            shift
            break
            ;;
        *) 
            shift
            ;;
    esac
    shift
done


#display to console
if [[ ! -z "$control" ]]; then echo -e "control\t\t\t$control"; fi

if [[ ! -z "$dir" ]]; then echo -e "interface_dir\t\t$dir"; fi

if [[ ! -z "$runtime_enabled" ]]; then echo -e "runtime_enabled\t\t$runtime_enabled"; fi

if [[ ! -z "$runtime_status" ]]; then echo -e "runtime_status\t\t$runtime_status"; fi

if [[ ! -z "$runtime_suspended_time" ]]; then
    runtime_suspended_time="$((runtime_suspended_time/1000))" #convert time from seconds to ms, this does not do value rounding
    printf -v runtime_suspended_time_formatted '%02dh:%02dm:%02ds' $((runtime_suspended_time/3600)) $((runtime_suspended_time%3600/60)) $((runtime_suspended_time%60))
    echo -e "device_suspended_time\t$runtime_suspended_time_formatted"
fi

if [[ ! -z "$runtime_active_time" ]]; then
    runtime_active_time=$((runtime_active_time/1000)) #convert time from seconds to ms, this does not do value rounding
    printf -v runtime_active_time_formatted '%02dh:%02dm:%02ds' $((runtime_active_time/3600)) $((runtime_active_time%3600/60)) $((runtime_active_time%60))
    echo -e "device_active_time\t$runtime_active_time_formatted"
fi

if [[ ! -z "$runtime_usage" ]]; then echo -e "runtime_usage\t\t${runtime_usage}";fi


# cat /proc/driver/nvidia/gpus/0000\:01\:00.0/information
# cat /proc/driver/nvidia/gpus/0000\:01\:00.0/power
# cat /proc/driver/nvidia/gpus/0000\:01\:00.0/registry